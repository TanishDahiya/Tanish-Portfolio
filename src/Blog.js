import React from 'react'
import "./Blog.css"

function Blog() {
    return (
        <div className="blog">
            <div class="blogwidth">
                <span>* This Blog Page is coming soon</span>
                      <h1>Apple’s 8GB M1 Silicon isn’t Magic, but it is Magical</h1>
                <img src="https://media.wired.com/photos/5d5af2b0cdb91100085b250e/125:94/w_2394,h_1800,c_limit/security_apple_1138155587.jpg" alt="" />
                <span>* Source Google</span>
          
                <p>In my story, Who Really Needs 16GB In Their M1 Mac?, I pushed back against Renee Ritchie’s assertion that anyone who can possibly afford to upgrade to 16GB when purchasing an M1 Mac should do so. My argument was that a large number of Mac users won’t derive a significant benefit from purchasing the upgrade. I’m not sure why that hit a nerve, but here is an abridged summary of the responses from people who had a problem with that argument:
8GB is fine for reading email but isn’t suitable for “real” work.
Anyone who can get by with 8GB should probably use a tablet instead of a computer.
Anyone who writes software needs more than 8GB.
My current system has 64GB so there’s no way I can use an M1 Mac.
The author doesn’t know anything about computers².
The Ad Hominem Fallacy³
Starting with the responses directed against me, I’ve been writing high-performance network analysis software for over 30 years. My first development PC was an AST Premium/286 Model 80 with 640 KB of memory which I used to develop a network analyzer that could keep up with full-bandwidth Ethernet within a 19KB TSR (terminate-and-stay-resident) driver. In Software Engineering a Better Life I discuss the performance aspects of that program in Chapter 48, The Need for Speed:
The maximum packet rate for 10 Mbps Ethernet is generated by minimum-sized packets transmitted at 100% bandwidth utilization, which equates to 14,880 packets per second. Luckily, real-world LANs didn’t sustain 100% bandwidth utilization, nor did they exclusively transmit minimum-sized packets. This meant that even a heavily utilized Ethernet LAN averaged less than 5,000 packets per second. That might sound laughably simple to analyze today when the phone in your pocket has a six-core 64-bit processor running at 2.65 GHz. But in 1988, businesses were still using IBM PC XTs with Intel’s 16-bit 8088 CPU running at 4.77 MHz. This CPU yielded 0.25 MIPS of processing power, less than 0.001% of modern CPUs. To paraphrase Mr. Spock in The City on the Edge of Forever, compared to today’s processors, I was endeavoring to analyze full-bandwidth Ethernet using stone knives and bearskins.
To illustrate the direness of the situation, LAN Patrol running on a 4.77 MHz CPU would only have 320 CPU clocks to process each packet at the maximum packet rate. Even simple instructions like a short jump consumed 15 clocks. Multiply and divide instructions started at 118 and 144 clocks respectively. And that was for 16-bit operations. At 10 Mbps even a 32-bit byte counter would overflow in less than an hour. LAN Patrol would need to implement 48-bit counters, which required 3 add instructions each time a counter was updated.</p>
<span>* This Blog Page is coming soon</span>
            </div>
            
        </div>
    )
}

export default Blog
